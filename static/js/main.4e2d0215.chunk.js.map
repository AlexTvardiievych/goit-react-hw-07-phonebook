{"version":3,"sources":["redux/Contacts/contactsSlice.js","redux/Contacts/filterSlice.js","redux/store.js","components/ContactForm/ContactForm.styled.jsx","components/Utils/Button/Button.styled.jsx","components/Utils/Button/Button.jsx","components/Utils/Title/Title.styled.jsx","components/Utils/Title/Title.jsx","components/Utils/Input/Input.styled.jsx","components/Utils/Input/Input.jsx","components/ContactForm/ContactForm.jsx","Selectors/contacts-selectors.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/Contacts.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Utils/Container/Container.styled.jsx","components/Utils/Container/Container.jsx","App.js","index.js"],"names":["contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","id","url","method","invalidatesTags","createContact","contactData","body","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","filterSlice","createSlice","name","initialState","reducers","filter","state","action","payload","actions","configureStore","reducer","middleware","getDefaultMiddleware","logger","Form","styled","form","Btn","button","Button","text","onClick","title","PageTitle","h2","props","size","color","marginR","marginL","marginT","Title","Field","input","Input","value","type","onChange","placeholder","ContactForm","useState","setName","number","setNumber","contacts","data","handleChange","e","target","onSubmit","preventDefault","find","contact","toLowerCase","alert","pattern","required","getFilter","Name","p","Number","ContactItem","List","ul","Item","li","ContactList","contactList","filterValue","useSelector","includes","map","Filter","dispatch","useDispatch","Wrapper","div","Container","children","App","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"8OAEaA,EAAcC,YAAU,CACnCC,YAAa,cACbC,UAAWC,YAAe,CACxBC,QAAS,4DAEXC,SAAU,CAAC,YACXC,UAAW,SAACC,GAAD,MAAc,CACvBC,cAAeD,EAAQE,MAAM,CAC3BA,MAAO,iBAAM,aACbC,aAAc,CAAC,cAEjBC,cAAeJ,EAAQK,SAAS,CAC9BH,MAAO,SAACI,GAAD,MAAS,CACdC,IAAI,aAAD,OAAeD,GAClBE,OAAQ,WAEVC,gBAAiB,CAAC,cAEpBC,cAAeV,EAAQK,SAAS,CAC9BH,MAAO,SAACS,GAAD,MAAkB,CACvBJ,IAAK,YACLC,OAAQ,OACRI,KAAMD,IAERF,gBAAiB,CAAC,kBAMtBI,EAGErB,EAHFqB,sBACAC,EAEEtB,EAFFsB,yBACAC,EACEvB,EADFuB,yBC9BIC,EAAcC,YAAY,CAC9BC,KAAM,kBACNC,aAJmB,GAKnBC,SAAU,CACRC,OAAQ,SAACC,EAAOC,GAAR,OAA4BA,EAAOC,YAGhCH,EAAWL,EAAYS,QAAvBJ,OACAL,IAAf,Q,iBCPeU,cAAe,CAC5BC,SAAO,mBACJnC,EAAYE,YAAcF,EAAYmC,SADlC,uBAELN,GAFK,GAIPO,WAAY,SAACC,GAAD,4BACPA,KADO,CAEVrC,EAAYoC,WACZE,S,sBCXSC,EAAOC,IAAOC,KAAV,uICAJC,EAAMF,IAAOG,OAAV,kL,OCSDC,I,EAAAA,EARf,YAA2C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAC/B,OACE,cAACL,EAAD,CAAKK,MAAOA,EAAOD,QAASA,EAA5B,SACGD,KCJMG,EAAYR,IAAOS,GAAV,qIACP,SAACC,GAAD,OAAWA,EAAMC,QACrB,SAACD,GAAD,OAAWA,EAAME,SACV,SAACF,GAAD,OAAWA,EAAMG,WAClB,SAACH,GAAD,OAAWA,EAAMI,WAClB,SAACJ,GAAD,OAAWA,EAAMK,WCUlBC,I,EAAAA,EAdf,YAAkE,IAAjDD,EAAgD,EAAhDA,QAASF,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,QAAST,EAAqB,EAArBA,KAAMM,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACtD,OACE,cAACJ,EAAD,CACEO,QAASA,EACTF,QAASA,EACTC,QAASA,EACTF,MAAOA,EACPD,KAAMA,EALR,SAOGN,KCVMY,EAAQjB,IAAOkB,MAAV,6LCaHC,MAZf,YAA8D,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,KAAMnC,EAA+B,EAA/BA,KAAMoC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAC5C,OACE,cAACN,EAAD,CACEM,YAAaA,EACbH,MAAOA,EACPC,KAAMA,EACNnC,KAAMA,EACNoC,SAAUA,KC6EDE,I,IAAAA,EA/Ef,WACE,MAAwBC,mBAAS,IAAjC,mBAAOvC,EAAP,KAAawC,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAAwB7C,IAAjBL,EAAP,oBACcmD,EAAahD,IAAnBiD,KAEFC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlB/C,EAAR,EAAQA,KAAMkC,EAAd,EAAcA,MAEd,OAAQlC,GACN,IAAK,OACHwC,EAAQN,GACR,MACF,IAAK,SACHQ,EAAUR,GACV,MACF,QACE,SA4BN,OACE,eAACrB,EAAD,CAAMmC,SAzBa,SAACF,GAOpB,GANAA,EAAEG,iBAEyBN,EAASO,MAClC,SAACC,GAAD,OAAaA,EAAQnD,KAAKoD,gBAAkBpD,EAAKoD,iBAOjD,OAHAC,MAAM,GAAD,OAAIrD,EAAJ,4BACLwC,EAAQ,SACRE,EAAU,IAIC,KAAT1C,GAA0B,KAAXyC,GAKnBjD,EAAc,CAAEQ,OAAMyC,WACtBD,EAAQ,IACRE,EAAU,KANRW,MAAM,6BAUR,UACE,cAAC,EAAD,CAAO1B,QAAS,GAAIF,KAAM,GAAIN,KAAK,SACnC,cAAC,EAAD,CACEkB,YAAY,eACZH,MAAOlC,EACPmC,KAAK,OACLnC,KAAK,OACLsD,QAAQ,yHACRjC,MAAM,kcACNkC,UAAQ,EACRnB,SAAUS,IAEZ,cAAC,EAAD,CAAOlB,QAAS,GAAIC,QAAS,GAAIH,KAAM,GAAIN,KAAK,WAChD,cAAC,EAAD,CACEkB,YAAY,iBACZH,MAAOO,EACPN,KAAK,MACLnC,KAAK,SACLsD,QAAQ,yFACRjC,MAAM,giBACNkC,UAAQ,EACRnB,SAAUS,IAEZ,cAAC,EAAD,CACExB,MAAM,kBACNF,KAAK,MACLM,KAAM,GACNU,KAAK,eCjFAqB,EAAY,SAACpD,GAAD,OAAWA,EAAMD,QCE7BsD,EAAO3C,IAAO4C,EAAV,gDAIJC,EAAS7C,IAAO4C,EAAV,gDCaJE,I,IAAAA,EAff,YAAmC,IAAZT,EAAW,EAAXA,QACrB,OACE,qCACE,cAACM,EAAD,UAAON,EAAQnD,OACf,cAAC,EAAD,UAASmD,EAAQV,aCNVoB,EAAO/C,IAAOgD,GAAV,mEAIJC,EAAOjD,IAAOkD,GAAV,oEC6CFC,MAvCf,WACE,IAAcC,EAAgBvE,IAAtBiD,KACR,EAAwBhD,IAAjBV,EAAP,oBACMiF,EAAcC,aAAY,SAAChE,GAAD,OAAWoD,EAAUpD,MAC/CuC,EAAQ,OAAGuB,QAAH,IAAGA,OAAH,EAAGA,EAAa/D,QAAO,SAACgD,GAAD,OACnCA,EAAQnD,KAAKoD,cAAciB,SAASF,EAAYf,kBAGlD,OACE,mCACE,cAACS,EAAD,UACGK,GACCvB,EAAS2B,KAAI,SAACnB,GAAD,OACX,eAACY,EAAD,WACE,cAAC,EAAD,CAAaZ,QAASA,IACtB,cAAC,EAAD,CACE9B,MAAM,uBACNF,KAAK,SACLgB,KAAK,SACLf,QAAS,kBAAMlC,EAAciE,EAAQ/D,SAN9B+D,EAAQ/D,YCEhBmF,I,EAAAA,EApBf,WACE,IAAMC,EAAWC,cACXvC,EAAQkC,aAAY,SAAChE,GAAD,OAAWoD,EAAUpD,MAK/C,OACE,qCACE,cAAC,EAAD,CAAOqB,KAAM,GAAIN,KAAK,0BACtB,cAAC,EAAD,CACEkB,YAAY,2BACZF,KAAK,OACLnC,KAAK,SACLkC,MAAOA,EACPE,SAZW,SAACU,GAChB0B,EAASrE,EAAO2C,EAAEC,OAAOb,eCThBwC,EAAU5D,IAAO6D,IAAV,6HCKLC,OAJf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OAAO,cAACH,EAAD,UAAUG,KCiBJC,OAff,WAEE,OACE,eAAC,GAAD,WACE,cAAC,EAAD,CAAOpD,MAAM,UAAUD,KAAM,GAAIN,KAAK,cACtC,8BACE,cAAC,EAAD,MAEF,cAAC,EAAD,IACA,cAAC,EAAD,CAAOU,QAAS,GAAIJ,KAAM,GAAIN,KAAK,aACnC,cAAC,EAAD,QCVN4D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.4e2d0215.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const contactsApi = createApi({\n  reducerPath: \"contactsApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://617d30941eadc5001713640c.mockapi.io/testapi/v1/\",\n  }),\n  tagTypes: [\"Contacts\"],\n  endpoints: (builder) => ({\n    fetchContacts: builder.query({\n      query: () => \"/contacts\",\n      providesTags: [\"Contacts\"],\n    }),\n    deleteContact: builder.mutation({\n      query: (id) => ({\n        url: `/contacts/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"Contacts\"],\n    }),\n    createContact: builder.mutation({\n      query: (contactData) => ({\n        url: \"/contacts\",\n        method: \"POST\",\n        body: contactData,\n      }),\n      invalidatesTags: [\"Contacts\"],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n  useCreateContactMutation,\n} = contactsApi;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = \"\";\n\nconst filterSlice = createSlice({\n  name: \"contacts/filter\",\n  initialState,\n  reducers: {\n    filter: (state, action) => (state = action.payload),\n  },\n});\nexport const { filter } = filterSlice.actions;\nexport default filterSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { contactsApi } from \"./Contacts/contactsSlice\";\nimport filter from \"./Contacts/filterSlice\";\nimport logger from \"redux-logger\";\n\nexport default configureStore({\n  reducer: {\n    [contactsApi.reducerPath]: contactsApi.reducer,\n    filter,\n  },\n  middleware: (getDefaultMiddleware) => [\n    ...getDefaultMiddleware(),\n    contactsApi.middleware,\n    logger,\n  ],\n});\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  flex-direction: column;\n  border-style: solid;\n  border-width: 1px;\n  padding: 5px;\n  width: 400px;\n`;\n","import styled from \"@emotion/styled\";\n\nexport const Btn = styled.button`\n  margin-top: 15px;\n  width: 300px;\n  border: none;  \n  background-color: transparent;\n\n  &:hover {\n    border-bottom: 1px solid #000d59;\n  }\n`;\n","import React from \"react\";\nimport { Btn } from \"./Button.styled\";\n\nfunction Button({ text, onClick, title }) {\n  return (\n    <Btn title={title} onClick={onClick}>\n      {text}\n    </Btn>\n  );\n}\n\nexport default Button;\n","import styled from \"@emotion/styled\";\n\nexport const PageTitle = styled.h2`\n  font-size: ${(props) => props.size}px;\n  color: ${(props) => props.color};\n  margin-right: ${(props) => props.marginR}px;\n  margin-left: ${(props) => props.marginL}px;\n  margin-top: ${(props) => props.marginT}px;\n`;\n","import React from \"react\";\nimport { PageTitle } from \"./Title.styled\";\n\nfunction Title({ marginT, marginR, marginL, text, size, color }) {\n  return (\n    <PageTitle\n      marginT={marginT}\n      marginR={marginR}\n      marginL={marginL}\n      color={color}\n      size={size}\n    >\n      {text}\n    </PageTitle>\n  );\n}\n\nexport default Title;\n","import styled from \"@emotion/styled\";\n\nexport const Field = styled.input`\n  width: 300px;\n  border: none;\n  border-bottom: 1px solid gray;\n  background-color: transparent;\n\n  &:hover {\n    border-bottom: 1px solid #000d59;\n  }\n`;\n","import React from \"react\";\nimport { Field } from \"./Input.styled\";\n\nfunction Input({ value, type, name, onChange, placeholder }) {\n  return (\n    <Field\n      placeholder={placeholder}\n      value={value}\n      type={type}\n      name={name}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default Input;\n","import { useState } from \"react\";\nimport { useCreateContactMutation, useFetchContactsQuery } from \"../../redux/Contacts/contactsSlice\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"./ContactForm.styled\";\nimport Button from \"../Utils/Button/Button\";\nimport Title from \"../Utils/Title/Title\";\nimport Input from \"../Utils/Input/Input\";\n\nfunction ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [createContact] = useCreateContactMutation();\n  const { data: contacts } = useFetchContactsQuery();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const checkOnSameContact = contacts.find(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (checkOnSameContact) {\n      alert(`${name} is already in contacts`);\n      setName(\"\");\n      setNumber(\"\");\n      return;\n    }\n\n    if (name === \"\" || number === \"\") {\n      alert(\"Please fill empty fields\");\n      return;\n    }\n\n    createContact({ name, number });\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Title marginR={15} size={18} text=\"Name\" />\n      <Input\n        placeholder=\"type name...\"\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n      />\n      <Title marginR={15} marginL={30} size={18} text=\"Number\" />\n      <Input\n        placeholder=\"type number...\"\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n      />\n      <Button\n        title=\"Add to contacts\"\n        text=\"Add\"\n        size={20}\n        type=\"submit\"\n      />\n    </Form>\n  );\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};","export const getFilter = (state) => state.filter;\n","import styled from \"@emotion/styled\";\n\nexport const Name = styled.p`\n  font-size: 18px;\n`;\n\nexport const Number = styled.p`\n  font-size: 18px;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Name, Number } from \"./ContactItem.styled\";\n\nfunction ContactItem({ contact }) {\n  return (\n    <>\n      <Name>{contact.name}</Name>\n      <Number>{contact.number}</Number>\n    </>\n  );\n}\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\nexport default ContactItem;\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n`;\nexport const Item = styled.li`\n  padding: 5px;\n  margin-right: 40px;\n`;\n","import { useSelector } from \"react-redux\";\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n} from \"../../redux/Contacts/contactsSlice\";\nimport { getFilter } from \"../../Selectors/contacts-selectors\";\nimport PropTypes from \"prop-types\";\n\nimport ContactItem from \"../ContactItem/ContactItem\";\nimport Button from \"../Utils/Button/Button\";\nimport { List, Item } from \"./Contacts.styled\";\n\nfunction ContactList() {\n  const { data: contactList } = useFetchContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n  const filterValue = useSelector((state) => getFilter(state));\n  const contacts = contactList?.filter((contact) =>\n    contact.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n\n  return (\n    <>\n      <List>\n        {contactList &&\n          contacts.map((contact) => (\n            <Item key={contact.id}>\n              <ContactItem contact={contact} />\n              <Button\n                title=\"Remove from contacts\"\n                text=\"Remove\"\n                type=\"button\"\n                onClick={() => deleteContact(contact.id)}\n              />\n            </Item>\n          ))}\n      </List>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactList;","import { useDispatch, useSelector } from \"react-redux\";\nimport { filter } from \"../../redux/Contacts/filterSlice\";\nimport { getFilter } from \"../../Selectors/contacts-selectors\";\nimport PropTypes from \"prop-types\";\nimport Title from \"../Utils/Title/Title\";\nimport Input from \"../Utils/Input/Input\";\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector((state) => getFilter(state));\n  const onChange = (e) => {\n    dispatch(filter(e.target.value));\n  };\n\n  return (\n    <>\n      <Title size={18} text=\"Find Contacts by name\" />\n      <Input\n        placeholder=\"type to find contacts...\"\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n}\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  padding: 15px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import React from \"react\";\nimport { Wrapper } from \"./Container.styled\";\n\nfunction Container({ children }) {\n  return <Wrapper>{children}</Wrapper>;\n}\n\nexport default Container;\n","import ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport Container from \"./components/Utils/Container/Container\";\nimport Title from \"./components/Utils/Title/Title\";\n\nfunction App() {\n\n  return (\n    <Container>\n      <Title color=\"#424242\" size={30} text=\"Phonebook\" />\n      <div>\n        <ContactForm />\n      </div>\n      <Filter />\n      <Title marginT={40} size={20} text=\"Contacts\" />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}